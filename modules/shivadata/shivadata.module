<?php

/**
 * Sample url for using a datanode in a new visualization as on shiva production:
 * http://shiva.virginia.edu/node/add/shivanode/3013/chart?ctype=Geo%20Chart
 * 
 * @TODO: Use only one data node for example per type. Don't create one for each user. Have title Example Data for SHIVA	 
 * 
 * Note: After updating delete all "Example Data for SHIVA" nodes created previously and converted.
 * 
 */

function shivadata_menu() {
	$items = array();
	$items['shivadata/text/%'] = array(
    'title' => 'Shiva Text Data',
    'description' => 'Returns a Shivadata pasted text as a CSV for use in Shiva Visualizations',
    'page callback' => 'shivadata_text_as_csv',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
	);
	
  $items['admin/config/content/shivanode/convert'] = array(
    'title' => 'Convert Data Entries',
    'description' => 'Converts data entries from old format to individual records of shivadata type',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('shivadata_admin_convert_form'),
    'access arguments' =>  array('access shivanode view settings'),
    'weight' => -10
  );
  
	
	return $items;
}

/**
 * Given a Google Doc ID, Title and optional Description, this function creates a shivadata node for the 
 * spreadsheet.
 * 
 * TODO: Extend to add other datatypes
 * 
 */
function shivadata_add_node($gid, $desc='') {
	global $user;
	module_load_include('inc', 'gdrive', 'gdrive');
	$gfile = gdrive_get_file($gid);
	$node = new stdClass();
  $node->title = $gfile['title'];
  $node->type = "shivadata";
  node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
  $node->uid = $user->uid; 
  $node->status = 1; // Published
  $node->promote = 0; // Not Promoted to front page
  $node->comment = 0; // Comments disabled
  $node = node_submit($node); // Prepare node for saving
  
  // Add Custom Data
  // Shivadata type 0 = google doc url
  $node->shivadata_type[$node->language][]['value'] = 0;
	$node->shivadata_source_url[$node->language][]['value'] = $gfile['alternateLink'];
	$node->body[$node->language][]['value'] = $desc;
  node_save($node);
	return $node;
}

/**
 * @TODO: Need to add a function for modifying the display of this node type to show actual data
 * 
 * @TODO: Modify display of node to include "Use this Data Link"
 */
 
 
/**
 * shivadata_get_url: Returns the url for the data depending on the type of data.
 * 		GDoc and CSV return URL from URL field
 * 		File returns URL to file in Drupal system
 * 		Text returns shivadata/text/[NID] defined above
 * 
 * 	TODO: Add ability to upload Excell Docs? Or Require CSV?
 */
function shivadata_get_url() {
	// TODO: Return url depending on type of data 	
}

/**
 * Return Pasted text as a CSV to provide URL for 
 */
 
 function shivadata_text_as_csv($nid) {
 	$node = node_load($nid);
	$txtfield = field_get_items('node', $node, 'shivadata_text');
	$sdata = field_view_value('node', $node, 'shivadata_text', $txtfield[0]);
 	drupal_add_http_header('Content-type', 'text/csv; charset=utf-8'); // or do we want application/csv ?
 	return $sdata;
 }
 
 
/**
 * Implements hook_node_view_alter(&$build)
 *   Adding field showing which data element is used by a visualization
 *
 */ 
function shivadata_preprocess_node(&$vars) {
  //dpm($vars, 'vars in sppn');
	if($vars['type'] == 'shivadata') {
		$vars['shivanode_links'] = shivadata_get_links($vars['nid'], 'links');
		$vars['use_link'] = l(t('Visualize!'), "visualize/{$vars['nid']}"); //drupal_render(drupal_get_form('shivadata_create_select_form', $vars['nid']));
	}
}

function shivadata_create_select_form($form, &$form_state, $nid) {
	module_load_include('inc', 'shivanode', 'includes/shivanode.types');
	$options = array('0' => t("Choose a type")) + shivanode_get_types('datatypes', FALSE);
	$form['desc'] = array(
		'#markup' => t("<div id=\"dselmessage\"></div>"),
	);
	$form['vistype'] = array(
		'#type' => 'select',
		'#title' => t('Visualize this data'),
		'#options' => $options,
		'#description' => t('Use this data to create a visualization of your choice.'),
		'#attributes' => array('onchange' => "form.action += '/' + form.vistype.value; form.submit();"),
	);
	$form['nid'] = array(
			'#type' => 'hidden',
			'#value' => $nid,
	);
	$form['#action'] = url('node/add/shivanode/' . $nid);
	return $form;
}


/**
 * Returns a list of nodes using the data node whose id is given. Can be styled as an array of nids or links
 * 
 * @param $did : the node id of the shivadata node representing the datat
 * @param $style : either 'nids' or 'links'
 * 
 * @return array of either nids or links
 */
function shivadata_get_links($did, $style='nids') {
	$result = db_query('select * from {shivadata_links} where data_id=:did', array(':did'=>$did));
	$links = array();
	while($record = $result->fetchAssoc()){
		$nid = $record['vis_id'];
		if($style == 'links') {
			$node = node_load($nid);
			$user = user_load($record['uid']);
			$date = Date('M. j, Y', $record['created']);
			$links[] = l($node->title, "node/$nid", array(
				'attributes' => array(
					'title' => "Created by {$user->name} on {$date}",
				),
			));
		} else {
			$links[] = $nid;
		}
	}
	return $links;
}

 /****** Convert Old Nodes Functions *******/
 /**
  * Add shivanode admin page to convert old data nodes to this new format
  * Temporary: Remove after one production cycle once nodes have been converted
  */
 function shivadata_admin_convert_form($form, &$form_state) {
  // Display Settings for Shivanode dealing with size of views etc.
    
  $form['shivadata_convert_header'] = array(
    '#markup' => t('<h3>Shiva Data Convert</h3>') .
      t('<p>Convert all old shivadata nodes to the new shivadata content type. You will need to delete old nodes separately.</p>'),
  );
	$old_nodes = shivadata_get_olddatanids();
	if (count($old_nodes) == 0) {
	  $form['shivadata_convert_items'] = array(
		  '#markup' => t('<p>There are no old nodes to be converted.'),
	  );
	} else {
		$form['shivadata_convert_items'] = array(
		  '#markup' => t('<p>There are @count old nodes to be converted.</p>', array('@count' => count($old_nodes))),
	  );
	  $form['shivadata_convert_button'] = array(
	    '#type' => 'submit',
	    '#value' => t('Convert All Data Nodes'),
	  );
		$form['#submit'][] = 'shivadata_admin_convert_submit';
	}
	
	return $form;
 }
 
function shivadata_admin_convert_submit($form, &$form_state) {
	batch_set(shivadata_admin_convert_batch());
}

function shivadata_admin_convert_batch() {
	$nids = shivadata_get_olddatanids();
	//$nids = array_splice($nids, 0, 200); // Limit to 200 for testing
	$operation = array();
	foreach($nids as $nid) {
    $operations[] = array('shivadata_admin_convert_node', array($nid));
  }
	 // build the batch instructions
  $batch = array(
    'operations' => $operations,
    'finished' => 'shivadata_admin_convert_finished',
  );
  return $batch;
}

function shivadata_get_olddatanids() {
 	$query = 'select n.nid, n.title from node n, field_data_shivanode_element_type et ' .
 							'where n.nid = et.entity_id and et.shivanode_element_type_value = 1 order by n.nid desc';
	$res = db_query($query);
	$nids = $nodes = array();
	while ($item = $res->fetchAssoc()) {
		$nids[] = $item['nid'];
	}
	return $nids;
}

function shivadata_admin_convert_node($old_nid, &$context) {
	$old_node = node_load($old_nid);
	$context['results'][] = $old_nid . ' : ' . check_plain($old_node->title);
  $context['message'] = t('Processing data node "@title" (@nid)', array('@title' => $old_node->title, '@nid' => $old_nid));
  $node = new stdClass();
  $node->title = $old_node->title;
  $node->type = 'shivadata';
  node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  $node->language = $old_node->language;  // Set language to match old node
  $node->uid = $old_node->uid; // set author to old node author
  $node->status = 1; // published 
  $node->promote = 0; // not promoted to front page
  $node->comment = 0; // comments disabled

  // Set Data Type to 0 = Google Doc URL
  $node->shivadata_type[$node->language][0]['value'] = 0;
	
  // Get Source URL From old nodes JSON
	$jsontxt = $old_node->shivanode_json[LANGUAGE_NONE][0]['value'];
	$json = json_decode($jsontxt);
	// if not dataSourceURL set warning and continue loop
	if (!isset($json->dataSourceUrl)) {
		drupal_set_message("{$old_node->title} ($old_node->nid) has no dataSourceUrl! Unable to convert!", 'warning');
		return;
	}
	// Otherwise set source_url field
  $node->shivadata_source_url[$node->language][0] = array(
    'value' => $json->dataSourceUrl,
    'safe_value' => $json->dataSourceUrl,
  );
  $node = node_submit($node); // Prepare node for saving
	// Change all timestamps to match old node
	$node->created = $old_node->created; 
	$node->changed = $old_node->changed;
	$node->revision_timestamp = $old_node->revision_timestamp;
	$node->last_comment_timestamp = $old_node->last_comment_timestamp;
  node_save($node); // Save new node
	shivadata_migrate_links($node, $old_nid); // Migrate old data links to refer to new node
	/*$old_link = l($old_nid, "node/$old_nid");
	$new_link = l($node->nid, "node/{$node->nid}");
	watchdog("shivadata", "Old node $old_link saved as node $new_link");*/
}

function shivadata_migrate_links($node, $old_id) {
	if(!isset($node->nid)) { return; }
	$data_id = $node->nid;
	//watchdog('shivadata', "Migrating links New Nid: $data_id; Old Nid: $old_id");
	$res = db_query('select * from {shivanode_links} where data_id=:oid', array(':oid'=>$old_id));
	if($res) {
		while ($record = $res->fetchAssoc()) {
			if($sn_node = node_load($record['sn_id'])) {
				$uid = (empty($sn_node->uid)) ? $node->uid : $sn_node->uid;
				if(empty($uid)) {
					$uid = 1;
					watchdog('shivadata convert', "No Uid found for ($data_id). Substituting Admin UID."); 
				}
				if(!empty($record['sn_id']) && !empty($record['created'])) {
					$res2 = db_insert('shivadata_links')->fields(array(
						'data_id' => $data_id,
						'vis_id' => $record['sn_id'],
						'old_data_id' => $old_id,
						'uid' => $uid,
						'created' => $record['created'],
					))->execute();
				} else {
					watchdog('shivadata convert', "Could not convert sn data link (link id: {$record['link_id']}).");
				}
			} else {
				watchdog('shivadata convert', "Could not load node {$record['sn_id']} in convert data link");
			}
		}
	}
}

function shivadata_admin_convert_finished($success, $results, $operations) {
  if ($success) {
    // display the number of nodes processed
    drupal_set_message(t('@count data nodes converted.', array('@count' => count($results))));
  } else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
}

/***** End of Convert Old Nodes ****/
